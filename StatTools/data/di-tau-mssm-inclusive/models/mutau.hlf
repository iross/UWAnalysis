

//Luminosity
Lumi_MuTau[223.];

//SignalShape PDFs with morphing
GGH120PdfMorph_MuTau   = import(diTau.root, w, GGH120PdfMorph_MuTau);
BBH120PdfMorph_MuTau   = import(diTau.root, w, BBH120PdfMorph_MuTau);
SM120PdfMorph_MuTau   = import(diTau.root, w, SM120PdfMorph_MuTau);

//Efficiency from MC 
GGH120MCEff_MuTau = import(diTau.root,w,GGH120MCEff_MuTau);
BBH120MCEff_MuTau = import(diTau.root,w,BBH120MCEff_MuTau);
SM120MCEff_MuTau = import(diTau.root,w,SM120MCEff_MuTau);

//signal yields for inclusive
GGHYield_MuTau = prod(r,GGH120MCEff_MuTau,GGH120_Fraction,Lumi_MuTau,EffCorr_Tau,EffCorr_TauHLT,EffCorr_Muon,LumiScale);
BBHYield_MuTau = prod(r,BBH120MCEff_MuTau,BBH120_Fraction,Lumi_MuTau,EffCorr_Tau,EffCorr_TauHLT,EffCorr_Muon,LumiScale);
SMYield_MuTau = prod(r,SM120MCEff_MuTau,SM120_Sigma,Lumi_MuTau,EffCorr_Tau,EffCorr_TauHLT,EffCorr_Muon,LumiScale);

//Background Shape Pdfs

//QCD is taken from DATA
QCDPdf_MuTau   = import(diTau.root, w, QCDPdf_MuTau);

//Z ->mumu shape is not morphed(mu+track)
ZMFTPdf_MuTau  = import(diTau.root, w, ZMFTPdf_MuTau);

//Background Shape Pdfs with morphing (only MC!)
ZTTPdfMorph_MuTau   = import(diTau.root, w, ZTTPdfMorph_MuTau);
WPdfMorph_MuTau     = import(diTau.root, w, WPdfMorph_MuTau);
ZJFTPdfMorph_MuTau  = import(diTau.root, w, ZJFTPdfMorph_MuTau);
TOPPdfMorph_MuTau   = import(diTau.root, w, TOPPdfMorph_MuTau);
VVPdfMorph_MuTau    = import(diTau.root, w, VVPdfMorph_MuTau);


//Background Normalization PDFs with PZETA CUT
//Background normalizations

ZTTMCNorm_MuTau    = import(diTau.root, w, ZTTMCNorm_MuTau);

ZTTNorm_MuTau = prod(ZTTMCNorm_MuTau,ZTTScale,Lumi_MuTau,EffCorr_Tau,EffCorr_TauHLT,EffCorr_Muon);
QCDNormPdf_MuTau   = Gamma(QCDNorm_MuTau[597.1, 400., 800.],  267.29, 2.2333 , 0);
WNormPdf_MuTau     = Gamma(WNorm_MuTau[624.30, 400,  800],    408.838, 1.526, 0);
ZMFTNormPdf_MuTau  = Lognormal(ZMFTNorm_MuTau[    32.30, 2, 150.], 32.30, 1.25); 
ZJFTNormPdf_MuTau  = Lognormal(ZJFTNorm_MuTau[    41.57, 2, 150.], 41.57, 1.1); 
TOPNormPdf_MuTau   = Lognormal(TOPNorm_MuTau[    67.11 ,10, 140.], 67.11, 1.12); 
VVNormPdf_MuTau    = Lognormal(VVNorm_MuTau[14.93, 0.3, 50.1], 14.93, 1.4);  


//Background Stack and yield definition for Yield Fit  
ZTTYield_MuTau[0.,10000];

//Background Stack and yield definition for Yield Fit  with morphing
YieldStack_MuTau = SUM(
 ZTTYield_MuTau  * ZTTPdfMorph_MuTau,
 QCDNorm_MuTau   * QCDPdf_MuTau,
 WNorm_MuTau     * WPdfMorph_MuTau,
 ZMFTNorm_MuTau  * ZMFTPdf_MuTau,
 ZJFTNorm_MuTau  * ZJFTPdfMorph_MuTau,
 TOPNorm_MuTau   * TOPPdfMorph_MuTau,
 VVNorm_MuTau    * VVPdfMorph_MuTau
);



//Background Stack for Higgs fit
BackgroundStack_MuTau = SUM(
 ZTTNorm_MuTau  * ZTTPdfMorph_MuTau,
 QCDNorm_MuTau   * QCDPdf_MuTau,
 WNorm_MuTau     * WPdfMorph_MuTau,
 ZMFTNorm_MuTau  * ZMFTPdf_MuTau,
 ZJFTNorm_MuTau  * ZJFTPdfMorph_MuTau,
 TOPNorm_MuTau   * TOPPdfMorph_MuTau,
 VVNorm_MuTau    * VVPdfMorph_MuTau
);


//Signal+Background Stack and definition for MSSM Higgs limit

//Same with morphing
MSSMStack_MuTau = SUM(
 GGHYield_MuTau  * GGH120PdfMorph_MuTau,
 BBHYield_MuTau  * BBH120PdfMorph_MuTau,
 ZTTNorm_MuTau   * ZTTPdfMorph_MuTau,
 QCDNorm_MuTau   * QCDPdf_MuTau,
 WNorm_MuTau     * WPdfMorph_MuTau,
 ZMFTNorm_MuTau  * ZMFTPdf_MuTau,
 ZJFTNorm_MuTau  * ZJFTPdfMorph_MuTau,
 TOPNorm_MuTau   * TOPPdfMorph_MuTau,
 VVNorm_MuTau    * VVPdfMorph_MuTau
);

SMStack_MuTau = SUM(
 SMYield_MuTau  * SM120PdfMorph_MuTau,
 ZTTNorm_MuTau   * ZTTPdfMorph_MuTau,
 QCDNorm_MuTau   * QCDPdf_MuTau,
 WNorm_MuTau     * WPdfMorph_MuTau,
 ZMFTNorm_MuTau  * ZMFTPdf_MuTau,
 ZJFTNorm_MuTau  * ZJFTPdfMorph_MuTau,
 TOPNorm_MuTau   * TOPPdfMorph_MuTau,
 VVNorm_MuTau    * VVPdfMorph_MuTau
);


//Constraint Pdf only mu+tau specific
Constraints_MuTau = PROD(QCDNormPdf_MuTau,WNormPdf_MuTau,ZMFTNormPdf_MuTau,ZJFTNormPdf_MuTau,TOPNormPdf_MuTau,VVNormPdf_MuTau);



//////////////////STANDALONE MODELS///////////////////////////




//Model to just fit a yield -   Morphing
model_MuTau_Yield = PROD(YieldStack_MuTau,Constraints_MuTau,TauMorphPdf);
model_MuTau_Yield_nuisances = set( ZTTYield_MuTau,QCDNorm_MuTau ,WNorm_MuTau,ZMFTNorm_MuTau,ZJFTNorm_MuTau,TOPNorm_MuTau,VVNorm_MuTau,TauScale );
model_MuTau_Yield_nuisancePdf = PROD(Constraints_MuTau,TauMorphPdf);



//Model for debugging
model_MuTau_ZTT0 = PROD(BackgroundStack_MuTau,Constraints_MuTau,ZTTScalePdf,EffCorrPdf_Muon,EffCorrPdf_Tau,EffCorrPdf_TauHLT,TauMorphPdf);
model_MuTau_ZTT0_nuisancePdf = PROD(Constraints_MuTau,ZTTScalePdf,EffCorrPdf_Muon,EffCorrPdf_Tau,EffCorrPdf_TauHLT,TauMorphPdf);
model_MuTau_ZTT0_nuisances = set( ZTTScale,QCDNorm_MuTau ,WNorm_MuTau,ZMFTNorm_MuTau,ZJFTNorm_MuTau,TOPNorm_MuTau,VVNorm_MuTau,EffCorr_Muon,EffCorr_TauHLT,EffCorr_Tau,TauScale); 


//Model for MSSM Higgs Cross section upper  limit
model_MuTau_MSSM_s = PROD(MSSMStack_MuTau,Constraints_MuTau,ZTTScalePdf,EffCorrPdf_Muon,EffCorrPdf_Tau,EffCorrPdf_TauHLT,LumiPdf,TauMorphPdf);
model_MuTau_MSSM_b = PROD(BackgroundStack_MuTau,Constraints_MuTau,ZTTScalePdf,EffCorrPdf_Muon,EffCorrPdf_Tau,EffCorrPdf_TauHLT,LumiPdf,TauMorphPdf);
model_MuTau_MSSM_nuisancePdf = PROD(Constraints_MuTau,ZTTScalePdf,EffCorrPdf_Muon,EffCorrPdf_Tau,EffCorrPdf_TauHLT,LumiPdf,TauMorphPdf);
model_MuTau_MSSM_POI = set(r);
model_MuTau_MSSM_observables = set(mass);
model_MuTau_MSSM_nuisances = set( ZTTScale,QCDNorm_MuTau ,WNorm_MuTau,ZMFTNorm_MuTau,ZJFTNorm_MuTau,TOPNorm_MuTau,VVNorm_MuTau,EffCorr_Muon,EffCorr_TauHLT,EffCorr_Tau,LumiScale,TauScale); 

model_MuTau_SM_s = PROD(SMStack_MuTau,Constraints_MuTau,ZTTScalePdf,EffCorrPdf_Muon,EffCorrPdf_Tau,EffCorrPdf_TauHLT,LumiPdf,TauMorphPdf);
model_MuTau_SM_b = PROD(BackgroundStack_MuTau,Constraints_MuTau,ZTTScalePdf,EffCorrPdf_Muon,EffCorrPdf_Tau,EffCorrPdf_TauHLT,LumiPdf,TauMorphPdf);
model_MuTau_SM_nuisancePdf = PROD(Constraints_MuTau,ZTTScalePdf,EffCorrPdf_Muon,EffCorrPdf_Tau,EffCorrPdf_TauHLT,LumiPdf,TauMorphPdf);
model_MuTau_SM_POI = set(r);
model_MuTau_SM_observables = set(mass);
model_MuTau_SM_nuisances = set( ZTTScale,QCDNorm_MuTau ,WNorm_MuTau,ZMFTNorm_MuTau,ZJFTNorm_MuTau,TOPNorm_MuTau,VVNorm_MuTau,EffCorr_Muon,EffCorr_TauHLT,EffCorr_Tau,LumiScale,TauScale); 



//Data for Mu+Tau
DATA_MuTau = import(diTau.root, w, DATA_MuTau);

	











