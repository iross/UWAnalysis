diff CVS/Entries /afs/hep.wisc.edu/cms/iross/HZZ2l2tau/CMSSW_4_2_5/src/UWAnalysis/NtupleTools/plugins/CVS/Entries
1,35c1,35
< /BuildFile/1.2/Sat Nov 20 00:13:32 2010//TFULL_DATASET_V9
< /BuildFile.xml/1.1/Tue Feb 22 01:22:52 2011//TFULL_DATASET_V9
< /CollectionSizeFiller.cc/1.1/Thu Jun  3 21:51:00 2010//TFULL_DATASET_V9
< /CollectionSizeFiller.h/1.2/Thu Sep 29 09:29:21 2011//TFULL_DATASET_V9
< /EventTreeMaker.cc/1.1/Thu Jun  3 21:51:00 2010//TFULL_DATASET_V9
< /EventTreeMaker.h/1.5/Thu Sep 29 09:29:21 2011//TFULL_DATASET_V9
< /EventWeightFiller.cc/1.1/Tue Feb 22 01:22:52 2011//TFULL_DATASET_V9
< /EventWeightFiller.h/1.5/Fri Nov 25 14:53:44 2011//TFULL_DATASET_V9
< /HighestJetVarFiller.cc/1.2/Fri Oct 21 18:36:26 2011//TFULL_DATASET_V9
< /HighestJetVarFiller.h/1.3/Fri Oct 21 18:36:27 2011//TFULL_DATASET_V9
< /HighestPtJetVarFiller.cc/1.3/Fri Oct 21 18:36:27 2011//TFULL_DATASET_V9
< /HighestPtJetVarFiller.h/1.4/Fri Oct 21 18:36:27 2011//TFULL_DATASET_V9
< /JetCountFiller.cc/1.9/Fri Oct 21 18:36:27 2011//TFULL_DATASET_V9
< /JetCountFiller.h/1.9/Fri Oct 21 18:36:27 2011//TFULL_DATASET_V9
< /PATIsolationFiller.h/1.2/Thu Sep 29 09:29:22 2011//TFULL_DATASET_V9
< /PUFiller.cc/1.1/Wed Sep 14 12:17:18 2011//TFULL_DATASET_V9
< /PUFiller.h/1.4/Mon Nov 14 14:19:51 2011//TFULL_DATASET_V9
< /RunRangeAnalyzer.cc/1.1/Sat Nov 20 00:19:00 2010//TFULL_DATASET_V9
< /RunRangeAnalyzer.h/1.2/Thu Dec  2 14:15:22 2010//TFULL_DATASET_V9
< /SVFitFiller.cc/1.2/Sun Jan  9 12:32:14 2011//TFULL_DATASET_V9
< /SVFitFiller.h/1.8/Mon Nov 14 14:19:51 2011//TFULL_DATASET_V9
< /SimpleTreeMaker.cc/1.2/Thu Mar  3 15:24:08 2011//TFULL_DATASET_V9
< /SimpleTreeMaker.h/1.1/Thu Jun  3 21:51:00 2010//TFULL_DATASET_V9
< /StringBasedNtupleFiller.cc/1.13/Mon Nov 14 14:19:51 2011//TFULL_DATASET_V9
< /StringBasedNtupleFiller.h/1.15/Mon Nov 14 14:19:51 2011//TFULL_DATASET_V9
< /TagAndProbePlotter.cc/1.3/Thu May 26 09:04:34 2011//TFULL_DATASET_V9
< /TagAndProbePlotter.h/1.8/Fri Oct 28 14:54:31 2011//TFULL_DATASET_V9
< /TauIDPlotter.cc/1.7/Fri Apr  8 14:21:59 2011//TFULL_DATASET_V9
< /TauIDPlotter.h/1.5/Fri Apr  8 14:21:59 2011//TFULL_DATASET_V9
< /TriggerFiller.cc/1.2/Sat Nov 20 00:13:32 2010//TFULL_DATASET_V9
< /TriggerFiller.h/1.4/Thu Sep 29 09:29:22 2011//TFULL_DATASET_V9
< /VertexFiller.cc/1.1/Thu Sep 29 09:29:22 2011//TFULL_DATASET_V9
< /VertexFiller.h/1.1/Thu Sep 29 09:29:22 2011//TFULL_DATASET_V9
< /VertexSizeFiller.cc/1.1/Fri Sep 24 16:57:19 2010//TFULL_DATASET_V9
< /VertexSizeFiller.h/1.3/Thu Sep 29 09:29:22 2011//TFULL_DATASET_V9
---
> /BuildFile/1.2/Sat Nov 20 00:13:32 2010//
> /BuildFile.xml/1.1/Tue Feb 22 01:22:52 2011//
> /CollectionSizeFiller.cc/1.1/Thu Jun  3 21:51:00 2010//
> /EventTreeMaker.cc/1.1/Thu Jun  3 21:51:00 2010//
> /EventWeightFiller.cc/1.1/Tue Feb 22 01:22:52 2011//
> /PUFiller.cc/1.1/Wed Sep 14 12:17:18 2011//
> /RunRangeAnalyzer.cc/1.1/Sat Nov 20 00:19:00 2010//
> /RunRangeAnalyzer.h/1.2/Fri Sep 23 14:18:12 2011//
> /SimpleTreeMaker.cc/1.2/Thu Mar  3 15:24:08 2011//
> /SimpleTreeMaker.h/1.1/Fri Sep 23 14:18:12 2011//
> /TriggerFiller.cc/1.2/Sat Nov 20 00:13:32 2010//
> /VertexSizeFiller.cc/1.1/Fri Sep 24 16:57:19 2010//
> /SVFitFiller.cc/1.2/Thu Sep 29 09:22:17 2011//
> /PATIsolationFiller.h/1.2/Fri Sep 23 14:18:12 2011//
> /TriggerFiller.h/1.4/Fri Sep 23 14:18:12 2011//
> /VertexSizeFiller.h/1.3/Thu Sep 29 08:48:52 2011//
> /VertexFiller.cc/1.1/Tue Sep 27 15:47:32 2011//
> /VertexFiller.h/1.1/Wed Sep 28 09:54:41 2011//
> /EventTreeMaker.h/1.6/Wed Feb 15 15:22:45 2012//
> /CollectionSizeFiller.h/1.2/Fri Feb 17 14:50:50 2012//
> /EventWeightFiller.h/1.5/Mon Apr 16 14:25:45 2012//
> /HighestJetVarFiller.cc/1.2/Mon Apr 16 14:25:46 2012//
> /HighestJetVarFiller.h/1.3/Result of merge//
> /HighestPtJetVarFiller.cc/1.3/Mon Apr 16 14:25:46 2012//
> /HighestPtJetVarFiller.h/1.4/Mon Apr 16 14:25:46 2012//
> /JetCountFiller.cc/1.9/Result of merge//
> /JetCountFiller.h/1.9/Result of merge//
> /PUFiller.h/1.5/Mon Apr 16 14:25:46 2012//
> /SVFitFiller.h/1.8/Result of merge//
> /StringBasedNtupleFiller.cc/1.15/Result of merge//
> /StringBasedNtupleFiller.h/1.17/Result of merge+Mon Apr 16 14:25:46 2012//
> /TagAndProbePlotter.cc/1.4/Result of merge+Mon Apr 16 14:25:46 2012//
> /TagAndProbePlotter.h/1.9/Result of merge//
> /TauIDPlotter.cc/1.8/Mon Apr 16 14:25:46 2012//
> /TauIDPlotter.h/1.6/Mon Apr 16 14:25:46 2012//
Only in CVS: Tag
29,98c29,125
<    public:
<        explicit EventTreeMaker(const edm::ParameterSet& iConfig)
< 	 {
< 
< 	   edm::Service<TFileService> fs;
< 	   t = fs->make<TTree>( "eventTree"  , "");
< 
< 	   //Add event and RUN BRANCHING	 
< 	   t->Branch("EVENT",&EVENT,"EVENT/i");
< 	   t->Branch("RUN",&RUN,"RUN/i");
< 	   t->Branch("LUMI",&LUMI,"LUMI/i");
< 
< 	   coreColl = iConfig.getParameter<std::vector<edm::InputTag> >("coreCollections");
< 
< 	   std::vector<std::string> branchNames = iConfig.getParameterNamesForType<edm::ParameterSet>();
< 	   for ( std::vector<std::string>::const_iterator branchName = branchNames.begin(); 
< 		 branchName != branchNames.end(); ++branchName ) {
< 	     std::cout << " reading configuration parameters for Branch = " << (*branchName) << std::endl;
< 
< 	     edm::ParameterSet ntupleFillerCfg = iConfig.getParameter<edm::ParameterSet>(*branchName);
< 	     std::string fillerPlugin = ntupleFillerCfg.getParameter<std::string>("pluginType");
< 	     NtupleFillerBase* filler = NtupleFillerFactory::get()->create(fillerPlugin,ntupleFillerCfg,t);
< 	     fillers.push_back(filler);
< 
< 	   }
< 	 }
< 
<        ~EventTreeMaker()
< 	 { 
< 	   for(unsigned int i=0;i<fillers.size();++i)
< 	     {
< 	       if(fillers[i]!=0)
< 		 delete fillers[i];
< 	     }
< 	   fillers.clear();
< 	 }
<        
<    private:
< 
<        virtual void analyze( const edm::Event& iEvent, const edm::EventSetup& iSetup)
< 	{
< 	  EVENT  = iEvent.id().event();
< 	  RUN    = iEvent.id().run();
< 	  LUMI   = iEvent.luminosityBlock();
< 
< 
< 	  bool doFill=false;
< 	  for(unsigned int i=0;i<coreColl.size();++i) {
< 	    edm::Handle<edm::View<reco::Candidate> > handle;
< 	    if(iEvent.getByLabel(coreColl.at(i),handle))
< 	      if(handle->size()>0)
< 		doFill=true;
< 	  }
< 
< 	  if(doFill) {
< 	    for(unsigned int i=0;i<fillers.size();++i)
< 	      fillers.at(i)->fill(iEvent, iSetup);
< 	    
< 	    t->Fill();
< 	  }
< 	}
< 
<       // ----------member data ---------------------------
< 
<       TTree *t;
< 
<       //add run event data
<       unsigned int EVENT;
<       unsigned int RUN;
<       unsigned int LUMI;
---
> 	public:
> 		explicit EventTreeMaker(const edm::ParameterSet& iConfig)
> 		{
> 
> 			typedef std::vector<edm::ParameterSet> VPSet;
> 
> 			edm::Service<TFileService> fs;
> 			t = fs->make<TTree>( "eventTree"  , "");
> 
> 			//Add event and RUN BRANCHING	 
> 			t->Branch("EVENT",&EVENT,"EVENT/i");
> 			t->Branch("RUN",&RUN,"RUN/i");
> 			t->Branch("LUMI",&LUMI,"LUMI/i");
> 			coreColl = iConfig.getParameter<std::vector<edm::InputTag> >("coreCollections");
> 
> 			std::vector<std::string> branchNames = iConfig.getParameterNamesForType<edm::ParameterSet>();
> 			for ( std::vector<std::string>::const_iterator branchName = branchNames.begin(); 
> 					branchName != branchNames.end(); ++branchName ) {
> 				std::cout << " reading configuration parameters for Branch = " << (*branchName) << std::endl;
> 
> 				edm::ParameterSet ntupleFillerCfg = iConfig.getParameter<edm::ParameterSet>(*branchName);
> 				std::string fillerPlugin = ntupleFillerCfg.getParameter<std::string>("pluginType");
> 				NtupleFillerBase* filler = NtupleFillerFactory::get()->create(fillerPlugin,ntupleFillerCfg,t);
> 				fillers.push_back(filler);
> 
> 			}
> 
> 			//if Ian's VPsets exist, add them to the fillers. 
> 			VPSet plugins;
> 			VPSet zzShared = iConfig.exists("zzShared") ? iConfig.getParameter<VPSet>("zzShared") : VPSet();
> 			VPSet metShared = iConfig.exists("metShared") ? iConfig.getParameter<VPSet>("metShared") : VPSet();
> 			VPSet genShared = iConfig.exists("genShared") ? iConfig.getParameter<VPSet>("genShared") : VPSet();
> 			VPSet counters = iConfig.exists("counters") ? iConfig.getParameter<VPSet>("counters") : VPSet();
> 			VPSet z1l1 = iConfig.exists("z1l1") ? iConfig.getParameter<VPSet>("z1l1") : VPSet();
> 			VPSet z1l2 = iConfig.exists("z1l2") ? iConfig.getParameter<VPSet>("z1l2") : VPSet();
> 			VPSet z2l1 = iConfig.exists("z2l1") ? iConfig.getParameter<VPSet>("z2l1") : VPSet();
> 			VPSet z2l2 = iConfig.exists("z2l2") ? iConfig.getParameter<VPSet>("z2l2") : VPSet();
> 			
> 			plugins.insert(plugins.end(),zzShared.begin(),zzShared.end());
> 			plugins.insert(plugins.end(),metShared.begin(),metShared.end());
> 			plugins.insert(plugins.end(),genShared.begin(),genShared.end());
> 			plugins.insert(plugins.end(),counters.begin(),counters.end());
> 			plugins.insert(plugins.end(),z1l1.begin(),z1l1.end());
> 			plugins.insert(plugins.end(),z1l2.begin(),z1l2.end());
> 			plugins.insert(plugins.end(),z2l1.begin(),z2l1.end());
> 			plugins.insert(plugins.end(),z2l2.begin(),z2l2.end());
> 			for (std::vector<edm::ParameterSet>::const_iterator branch = plugins.begin(); branch != plugins.end(); ++branch){
> 				std::string fillerPlugin = branch->getParameter<std::string>("pluginType");
> 				NtupleFillerBase* filler = NtupleFillerFactory::get()->create(fillerPlugin,*branch,t);
> 				fillers.push_back(filler);
> 			}
> 
> 		}
> 
> 		~EventTreeMaker()
> 		{ 
> 			for(unsigned int i=0;i<fillers.size();++i)
> 			{
> 				if(fillers[i]!=0)
> 					delete fillers[i];
> 			}
> 			fillers.clear();
> 		}
> 
> 	private:
> 
> 		virtual void analyze( const edm::Event& iEvent, const edm::EventSetup& iSetup)
> 		{
> 			EVENT  = iEvent.id().event();
> 			RUN    = iEvent.id().run();
> 			LUMI   = iEvent.luminosityBlock();
> 
> 
> 			bool doFill=false;
> 			for(unsigned int i=0;i<coreColl.size();++i) {
> 				edm::Handle<edm::View<reco::Candidate> > handle;
> 				if(iEvent.getByLabel(coreColl.at(i),handle))
> 					if(handle->size()>0)
> 						doFill=true;
> 			}
> 
> 			if(doFill) {
> 				for(unsigned int i=0;i<fillers.size();++i)
> 					fillers.at(i)->fill(iEvent, iSetup);
> 
> 				t->Fill();
> 			}
> 		}
> 
> 		// ----------member data ---------------------------
> 
> 		TTree *t;
> 
> 		//add run event data
> 		unsigned int EVENT;
> 		unsigned int RUN;
> 		unsigned int LUMI;
100,101c127,128
<       std::vector<edm::InputTag> coreColl;
<       std::vector<NtupleFillerBase*> fillers;
---
> 		std::vector<edm::InputTag> coreColl;
> 		std::vector<NtupleFillerBase*> fillers;
42a43,46
>     else
>       {
> 	printf("Event Weight NOT found!\n");
>       }
5d4
< DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuJetPairHighestJetVarFiller, "PATMuJetPairHighestJetVarFiller");
81a82
> 	std::cout << "src_" << std::endl;
103d103
< typedef HighestJetVarFiller<PATMuTauPair> PATMuJetPairHighestJetVarFiller;
5d4
< DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuJetPairHighestPtJetVarFiller, "PATMuJetPairHighestPtJetVarFiller");
80d79
< typedef HighestPtJetVarFiller<PATMuJetPair> PATMuJetPairHighestPtJetVarFiller;
5d4
< DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuJetPairJetCountFiller, "PATMuJetPairJetCountFiller");
20d18
< DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEleEleEleEleQuadJetCountFiller, "PATEleEleEleEleQuadJetCountFiller");
21a20,28
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEleEleEleEleQuadJetCountFiller, "PATEleEleEleEleQuadJetCountFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEleEleMuNuQuadJetCountFiller, "PATEleEleMuNuQuadJetCountFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEleEleEleNuQuadJetCountFiller, "PATEleEleEleNuQuadJetCountFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuMuMuNuQuadJetCountFiller, "PATMuMuMuNuQuadJetCountFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuMuEleNuQuadJetCountFiller, "PATMuMuEleNuQuadJetCountFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuMuMuTriJetCountFiller, "PATMuMuMuTriJetCountFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuMuEleTriJetCountFiller, "PATMuMuEleTriJetCountFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEleEleMuTriJetCountFiller, "PATEleEleMuTriJetCountFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEleEleEleTriJetCountFiller, "PATEleEleEleTriJetCountFiller");
105d104
< typedef JetCountFiller<PATMuJetPair> PATMuJetPairJetCountFiller;
121a121,128
> typedef JetCountFiller<PATEleEleMuNuQuad> PATEleEleMuNuQuadJetCountFiller;
> typedef JetCountFiller<PATEleEleEleNuQuad> PATEleEleEleNuQuadJetCountFiller;
> typedef JetCountFiller<PATMuMuMuNuQuad> PATMuMuMuNuQuadJetCountFiller;
> typedef JetCountFiller<PATMuMuEleNuQuad> PATMuMuEleNuQuadJetCountFiller;
> typedef JetCountFiller<PATMuMuMuTri> PATMuMuMuTriJetCountFiller;
> typedef JetCountFiller<PATMuMuEleTri> PATMuMuEleTriJetCountFiller;
> typedef JetCountFiller<PATEleEleMuTri> PATEleEleMuTriJetCountFiller;
> typedef JetCountFiller<PATEleEleEleTri> PATEleEleEleTriJetCountFiller;
25,33c25,26
< 	  value = new float[6];
< 	  t->Branch((tag_+"BXminus").c_str(),&value[0],(tag_+"BXminus/F").c_str());
< 	  t->Branch((tag_+"BXminusT").c_str(),&value[1],(tag_+"BXminusT/F").c_str());
< 
< 	  t->Branch((tag_+"BX0").c_str(),&value[2],(tag_+"BX0/F").c_str());
< 	  t->Branch((tag_+"BX0T").c_str(),&value[3],(tag_+"BX0T/F").c_str());
< 
< 	  t->Branch((tag_+"BXplus").c_str(),&value[4],(tag_+"BXplus/F").c_str());
< 	  t->Branch((tag_+"BXplusT").c_str(),&value[5],(tag_+"BXplusT/F").c_str());
---
> 	  value = 0;
> 	  t->Branch(tag_.c_str(),&value,(tag_+"/F").c_str());
45a39,40
>     value=0;
>     int crossings=0;
50,62c45,46
< 	int BX = i->getBunchCrossing();
< 	if(BX==-1) {
< 	  value[0] =  i->getPU_NumInteractions(); 
< 	  value[1] =i->getTrueNumInteractions(); 
< 	}
< 	if(BX==0) {
< 	  value[2] =  i->getPU_NumInteractions(); 
< 	  value[3] =i->getTrueNumInteractions(); 
< 	}
< 	if(BX==1) {
< 	  value[4] =  i->getPU_NumInteractions(); 
< 	  value[5] =i->getTrueNumInteractions(); 
< 	}
---
> 	value +=  i->getPU_NumInteractions(); 
> 	crossings++;
70c54
< 
---
>     value=value/crossings;
78c62,63
<   float* value;
---
>   float value;
> 
11,12c11,18
< 
< 
---
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEEETSVFitFiller, "PATEEETSVFitFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEEMTSVFitFiller, "PATEEMTSVFitFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEETTSVFitFiller, "PATEETTSVFitFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEEEMSVFitFiller, "PATEEEMSVFitFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMMETSVFitFiller, "PATMMETSVFitFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMMMTSVFitFiller, "PATMMMTSVFitFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMMTTSVFitFiller, "PATMMTTSVFitFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMMEMSVFitFiller, "PATMMEMSVFitFiller");
25d24
<       solution_(iConfig.getUntrackedParameter<std::string>("solution","PsMETLogM_fit")),
28c27,36
< 
---
> 	  psMass=0;
> 	  psMETMass=0;
> 	  psMETPtMass=0;
> 	  x1=0.0;
> 	  x2=0.0;
> 	  t->Branch((tag_+"KineMass").c_str(),&psMass,(tag_+"KineMass/F").c_str());
> 	  t->Branch((tag_+"KineMETMass").c_str(),&psMETMass,(tag_+"KineMETMass/F").c_str());
> 	  t->Branch((tag_+"KineMETPtMass").c_str(),&psMETPtMass,(tag_+"KineMETPtMass/F").c_str());
> 	  t->Branch((tag_+"x1").c_str(),&x1,(tag_+"x1/F").c_str());
> 	  t->Branch((tag_+"x2").c_str(),&x2,(tag_+"x2/F").c_str());
35,38c43,55
< 	  t->Branch((tag_+"Mass").c_str(),&nsvPsMETLogM_fit,(tag_+"Mass").c_str());
< 	  t->Branch((tag_+"Valid").c_str(),&nsvPsMETLogM_fit_valid,(tag_+"Valid").c_str());
< 	  t->Branch((tag_+"ErrUp").c_str(),&nsvPsMETLogM_fit_errUp,(tag_+"ErrUp").c_str());
< 	  t->Branch((tag_+"ErrDown").c_str(),&nsvPsMETLogM_fit_errDown,(tag_+"ErrDown").c_str());
---
> 	  t->Branch((tag_+"NSVPsMEtLogM_fit").c_str(),&nsvPsMETLogM_fit,(tag_+"NSVPsMEtLogM_fit").c_str());
> 	  t->Branch((tag_+"NSVPsMEtLogM_fit_valid").c_str(),&nsvPsMETLogM_fit_valid,(tag_+"NSVPsMEtLogM_fit_valid").c_str());
> 	  t->Branch((tag_+"NSVPsMEtLogM_fit_errUp").c_str(),&nsvPsMETLogM_fit_errUp,(tag_+"NSVPsMEtLogM_fit_errUp").c_str());
> 	  t->Branch((tag_+"NSVPsMEtLogM_fit_errDown").c_str(),&nsvPsMETLogM_fit_errDown,(tag_+"NSVPsMEtLogM_fit_errDown").c_str());
> 
>           nsvPsMETLogM_int = -1;
>           nsvPsMETLogM_int_valid = -1;
>           nsvPsMETLogM_int_errUp = -1;
>           nsvPsMETLogM_int_errDown = -1;
> 	  t->Branch((tag_+"NSVPsMEtLogM_int").c_str(),&nsvPsMETLogM_int,(tag_+"NSVPsMEtLogM_int").c_str());
> 	  t->Branch((tag_+"NSVPsMEtLogM_int_valid").c_str(),&nsvPsMETLogM_int_valid,(tag_+"NSVPsMEtLogM_int_valid").c_str());
> 	  t->Branch((tag_+"NSVPsMEtLogM_int_errUp").c_str(),&nsvPsMETLogM_int_errUp,(tag_+"NSVPsMEtLogM_int_errUp").c_str());
> 	  t->Branch((tag_+"NSVPsMEtLogM_int_errDown").c_str(),&nsvPsMETLogM_int_errDown,(tag_+"NSVPsMEtLogM_int_errDown").c_str());
54,55c71,81
< 
< 
---
> 	  psMass=0;
> 	  psMETMass=0;
> 	  psMETPtMass=0;
> 
> 	  if(handle->size()>0 &&handle->at(0).hasSVFitSolutions()) {
> 	    psMass = handle->at(0).svFitSolution("psKine")->mass();
> 	    psMETMass = handle->at(0).svFitSolution("psKine_MEt")->mass();
> 	    psMETPtMass = handle->at(0).svFitSolution("psKine_MEt_ptBalance")->mass();
> 	    x1 = handle->at(0).svFitSolution("psKine_MEt_ptBalance")->leg1().x();
> 	    x2 = handle->at(0).svFitSolution("psKine_MEt_ptBalance")->leg2().x();
>           }
57c83
<             const NSVfitResonanceHypothesisSummary* fitSoln = handle->at(0).nSVfitSolution(solution_);
---
>             const NSVfitResonanceHypothesisSummary* fitSoln = handle->at(0).nSVfitSolution("PsMETLogM_fit");
64c90,97
< 	  }
---
>             const NSVfitResonanceHypothesisSummary* intSoln = handle->at(0).nSVfitSolution("PsMETLogM_int");
>             if (intSoln) {
>               nsvPsMETLogM_int = intSoln->mass();
>               nsvPsMETLogM_int_valid = intSoln->isValidSolution();
>               nsvPsMETLogM_int_errUp = intSoln->massErrUp();
>               nsvPsMETLogM_int_errDown = intSoln->massErrDown();
>             }
>           }
77c110,116
<   std::string solution_;
---
>   float psMass;
> 
>   float psMETMass;
> 
> 
>   float psMETPtMass;
>   float x1,x2;
83a123,126
>   float nsvPsMETLogM_int;
>   float nsvPsMETLogM_int_valid;
>   float nsvPsMETLogM_int_errUp;
>   float nsvPsMETLogM_int_errDown;
97c140,147
< 
---
> typedef SVFitFiller<PATEleEleEleTauQuad> PATEEETSVFitFiller;
> typedef SVFitFiller<PATEleEleMuTauQuad> PATEEMTSVFitFiller;
> typedef SVFitFiller<PATEleEleTauTauQuad> PATEETTSVFitFiller;
> typedef SVFitFiller<PATEleEleEleMuQuad> PATEEEMSVFitFiller;
> typedef SVFitFiller<PATMuMuEleTauQuad> PATMMETSVFitFiller;
> typedef SVFitFiller<PATMuMuMuTauQuad> PATMMMTSVFitFiller;
> typedef SVFitFiller<PATMuMuTauTauQuad> PATMMTTSVFitFiller;
> typedef SVFitFiller<PATMuMuEleMuQuad> PATMMEMSVFitFiller;
5,6d4
< DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATGenParticleFiller, "PATGenParticleFiller");
< DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuJetPairFiller, "PATMuJetPairFiller");
31a30,38
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEleEleMuNuQuadFiller, "PATEleEleMuNuQuadFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEleEleEleNuQuadFiller, "PATEleEleEleNuQuadFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuMuMuNuQuadFiller, "PATMuMuMuNuQuadFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuMuEleNuQuadFiller, "PATMuMuEleNuQuadFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEleEleEleTriFiller, "PATEleEleEleTriFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATEleEleMuTriFiller, "PATEleEleMuTriFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuMuEleTriFiller, "PATMuMuEleTriFiller");
> DEFINE_EDM_PLUGIN(NtupleFillerFactory, PATMuMuMuTriFiller, "PATMuMuMuTriFiller");
> 
71a72
> 	std::cout << src_ << std::endl;
94d94
< typedef StringBasedNtupleFiller<reco::GenParticle> PATGenParticleFiller;
96d95
< typedef StringBasedNtupleFiller<PATMuJetPair> PATMuJetPairFiller;
121a121,128
> typedef StringBasedNtupleFiller<PATEleEleMuNuQuad> PATEleEleMuNuQuadFiller;
> typedef StringBasedNtupleFiller<PATEleEleEleNuQuad> PATEleEleEleNuQuadFiller;
> typedef StringBasedNtupleFiller<PATMuMuMuNuQuad> PATMuMuMuNuQuadFiller;
> typedef StringBasedNtupleFiller<PATMuMuEleNuQuad> PATMuMuEleNuQuadFiller;
> typedef StringBasedNtupleFiller<PATEleEleEleTri> PATEleEleEleTriFiller;
> typedef StringBasedNtupleFiller<PATEleEleMuTri> PATEleEleMuTriFiller;
> typedef StringBasedNtupleFiller<PATMuMuEleTri> PATMuMuEleTriFiller;
> typedef StringBasedNtupleFiller<PATMuMuMuTri> PATMuMuMuTriFiller;
8,9c8,9
< typedef TagAndProbePlotter<PATMuTrackPair,pat::Muon> MuonTagAndProbePlotter;
< typedef TagAndProbePlotter<PATMuTrackPair,pat::Tau> MuonMisIDTagAndProbePlotter;
---
> //typedef TagAndProbePlotter<PATMuTrackPair,pat::Muon> MuonTagAndProbePlotter;
> //typedef TagAndProbePlotter<PATMuTrackPair,pat::Tau> MuonMisIDTagAndProbePlotter;
14c14
< typedef TagAndProbePlotter<PATEleTrackPair,pat::Tau> ElectronMisIDTagAndProbePlotter;
---
> //typedef TagAndProbePlotter<PATEleTrackPair,pat::Tau> ElectronMisIDTagAndProbePlotter;
17,18c17,18
< DEFINE_FWK_MODULE(MuonTagAndProbePlotter);
< DEFINE_FWK_MODULE(MuonMisIDTagAndProbePlotter);
---
> //DEFINE_FWK_MODULE(MuonTagAndProbePlotter);
> //DEFINE_FWK_MODULE(MuonMisIDTagAndProbePlotter);
23c23
< DEFINE_FWK_MODULE(ElectronMisIDTagAndProbePlotter);
---
> //DEFINE_FWK_MODULE(ElectronMisIDTagAndProbePlotter);
107,108c107,108
<       if(iEvent.getByLabel(ref_,ref)&&ref->size()>0) 
< 	for(unsigned int i=0;i<ref->size();++i) {
---
> 	if(iEvent.getByLabel(ref_,ref)) 
> 	  for(unsigned int i=0;i<ref->size();++i) {
131a132
> 			  std::cout << src->at(j).electronID("cicTight") << std::endl;
135d135
< 
148c148
< 			std::cout << "Starting fill function" << std::endl;
---
> 
180d179
< 			std::cout << "Starting loop over genCandidates" << std::endl;
209d207
< 			std::cout << "Getting src_" << src_ << std::endl;
267d264
< 				std::cout << "done finding best indices" << std::endl;
276d272
< 				std::cout << "leptons done!" << std::endl;
279d274
< 				std::cout << "z cands done!" << std::endl;
284d278
< 				std::cout << "END" << std::endl;
diff: /afs/hep.wisc.edu/cms/iross/HZZ2l2tau/CMSSW_4_2_5/src/UWAnalysis/NtupleTools/plugins/diffdump: No such file or directory
